{"version":3,"sources":["serviceWorker.ts","header/styled.ts","constants.ts","header/index.tsx","footer/styled.ts","footer/index.tsx","body/styled.ts","body/index.tsx","globalStyled.ts","body/movies-board/styled.ts","body/movies-board/components/styled.ts","body/movies-board/components/card.tsx","body/movies-board/components/cards.tsx","body/movies-board/index.tsx","index.tsx","App.tsx"],"names":["Boolean","window","location","hostname","match","Styled","Header","styled","header","Footer","footer","Body","main","props","children","GlobalStyle","createGlobalStyle","MoviesBoard","div","Card","Img","img","MovieDescription","Button","button","card","actors","getActors","src","image","name","countries","count_vote","vote","map","item","replace","split","Cards","cards","key","id","initialValue","useState","movies","setMovies","useEffect","getMovies","setItems","a","fetch","response","json","data","result","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uICfN,IAKaC,EAAS,CAAEC,OALTC,IAAOC,OAAV,ICFiB,SCEhBF,EAAS,WAClB,OAAO,kBAACD,EAAOC,OAAR,O,0KCDX,IAQaD,EAAS,CAAEI,OARTF,IAAOG,OAAV,IFHiB,SGGhBD,EAAS,WAClB,OAAO,kBAAC,EAAOA,OAAR,O,iLCDX,IAOaJ,EAAS,CAAEM,KAPXJ,IAAOK,KAAV,IJHmB,OACA,SKEhBD,EAA0B,SAACE,GACtC,OAAO,kBAAC,EAAOF,KAAR,KAAcE,EAAMC,W,8GCFtB,IAAMC,EAAcC,YAAH,K,8NCAxB,IAQaX,EAAS,CAAEY,YARJV,IAAOW,IAAV,M,qlDCAjB,IAAMC,EAAOZ,IAAOW,IAAV,KA2EGb,EAAS,CAAEe,IAjEZb,IAAOc,IAAV,IAKLF,GA4DyBA,OAAMG,iBAvDVf,IAAOW,IAAV,IAIlBC,GAmDiDI,OAlCtChB,IAAOiB,OAAV,MCvCCL,EAAO,SAACM,GACnB,IAAMC,EAASC,EAAUF,EAAKC,QAC9B,OACE,kBAAC,EAAOP,KAAR,KACE,kBAAC,EAAOC,IAAR,CAAYQ,IAAG,+BAA0BH,EAAKI,SAC9C,kBAAC,EAAOP,iBAAR,KACE,4BAAKG,EAAKK,MACV,6BAAML,EAAKM,WACX,6BAAMN,EAAKO,YACX,kFAAiBP,EAAKQ,OACP,KAAdP,EAAO,IACN,oCACE,sEACA,4BACGA,EAAOQ,KAAI,SAAAC,GACV,OAAO,4BAAKA,QAKpB,kBAAC,EAAOZ,OAAR,kBAMFI,EAAY,SAACD,GAGjB,OADkBA,EAAOU,QADV,WAC0B,IACxBC,MAAM,OC7BZC,EAAQ,SAACC,GACpB,OACE,oCACGA,EAAMA,MAAML,KAAI,SAAAC,GACf,OACE,kBAAC,EAAD,CACEK,IAAKL,EAAKM,GACVA,GAAIN,EAAKM,GACTX,KAAMK,EAAKL,KACXD,MAAOM,EAAKN,MACZE,UAAWI,EAAKJ,UAChBL,OAAQS,EAAKT,OACbO,KAAME,EAAKF,KACXD,WAAYG,EAAKH,kBCZvBU,EAA4B,GAErBzB,EAAc,WAAO,IAAD,EACH0B,mBAASD,GADN,mBACxBE,EADwB,KAChBC,EADgB,KAO/B,OAJAC,qBAAU,WACRC,EAAUF,KACT,IAGD,kBAAC,EAAO5B,YAAR,KACE,kBAAC,EAAD,CAAOsB,MAAOK,MAKdG,EAAS,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACOC,MACrB,wDAFc,cACVC,EADU,gBAIGA,EAASC,OAJZ,OAIVC,EAJU,OAKhBL,EAASK,EAAKC,QALE,2CAAH,sDChBfC,IAASC,OAAO,mBCEG,WACjB,OACE,oCACE,kBAACzC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,SDVU,MAAQ0C,SAASC,eAAe,SdoI1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.89a269e6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import styled from \"styled-components\";\r\nimport { HEADER_HEIGHT } from \"../constants\";\r\n\r\nconst Header = styled.header`\r\n  height: ${HEADER_HEIGHT};\r\n  background-color: #8ac858;\r\n`;\r\n\r\nexport const Styled = { Header };\r\n","export const FOOTER_HEIGHT = \"50px\";\r\nexport const HEADER_HEIGHT = \"50px\";\r\n","import React from 'react';\r\nimport { Styled } from './styled';\r\n\r\nexport const Header = () => {\r\n    return <Styled.Header/>;\r\n}","import styled from \"styled-components\";\r\nimport { FOOTER_HEIGHT } from \"../constants\";\r\n\r\nconst Footer = styled.footer`\r\n  width: 100%;\r\n  height: ${FOOTER_HEIGHT};\r\n  background-color: #8ac858;\r\n  position: absolute;\r\n  bottom: 0;\r\n`;\r\n\r\nexport const Styled = { Footer };\r\n","import React from 'react';\r\nimport { Styled } from './styled';\r\n\r\nexport const Footer = () => {\r\n    return <Styled.Footer/>\r\n}","import styled from \"styled-components\";\r\nimport { FOOTER_HEIGHT, HEADER_HEIGHT } from \"../constants\";\r\n\r\nconst Body = styled.main`\r\n  overflow: auto;\r\n  position: fixed;\r\n  height: calc(100% - (${FOOTER_HEIGHT} + ${HEADER_HEIGHT}));\r\n  background-color: #f4f4f4;\r\n`;\r\n\r\nexport const Styled = { Body };\r\n","import React, { FunctionComponent } from \"react\";\r\nimport { Styled } from \"./styled\";\r\n\r\nexport const Body: FunctionComponent = (props) => {\r\n  return <Styled.Body>{props.children}</Styled.Body>;\r\n};\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    body {\r\n        margin: 0;\r\n    }\r\n`;","import styled from 'styled-components';\r\n\r\nconst MoviesBoard = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    font-size: 20px;\r\n    font-style: italic;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const Styled = { MoviesBoard }","import styled from \"styled-components\";\r\n\r\nconst Card = styled.div`\r\n  position: relative;\r\n  margin: 15px 25px;\r\n  width: 250px;\r\n  height: 400px;\r\n  border: 2px solid #8ac858;\r\n  border-radius: 15px;\r\n  word-break: break-word;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  width: inherit;\r\n  height: 100%;\r\n  border-radius: 13px;\r\n\r\n  ${Card}:hover & {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst MovieDescription = styled.div`\r\n  display: none;\r\n  padding: 10px;\r\n\r\n  ${Card}:hover & {\r\n    display: block;\r\n  }\r\n\r\n  div {\r\n    padding: 2px 0;\r\n  }\r\n\r\n  ul {\r\n    margin: 5px 0;\r\n  }\r\n\r\n  h3 {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  min-width: 120px;\r\n  height: 30px;\r\n  border-radius: 7px;\r\n  font-weight: 700;\r\n  cursor: pointer;\r\n  position: absolute;\r\n  bottom: 15px;\r\n  right: 15px;\r\n  border: none;\r\n  background: rgb(138, 200, 88)\r\n    linear-gradient(rgb(138, 200, 88), rgb(60, 200, 88));\r\n  box-shadow: inset 0 -2px 1px rgba(0, 0, 0, 0),\r\n    inset 0 1px 2px rgba(0, 0, 0, 0), inset 0 0 0 60px rgba(255, 255, 0, 0);\r\n\r\n  &:hover {\r\n    background-color: #59f23a;\r\n    box-shadow: inset 0 -1px 1px rgba(0, 0, 0, 0),\r\n      inset 0 1px 2px rgba(0, 0, 0, 0), inset 0 0 0 60px rgba(255, 255, 0, 0.5);\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  &:active {\r\n    padding: calc(0.25em + 1px) 0.5em calc(0.25em - 1px);\r\n    border-color: rgba(177, 159, 0, 1);\r\n    box-shadow: inset 0 -1px 1px rgba(0, 0, 0, 0.1),\r\n      inset 0 1px 2px rgba(0, 0, 0, 0.3),\r\n      inset 0 0 0 60px rgba(255, 255, 0, 0.45);\r\n  }\r\n`;\r\n\r\nexport const Styled = { Img, Card, MovieDescription, Button };\r\n","import React from \"react\";\r\nimport { Styled } from \"./styled\";\r\nimport { MovieCard } from \"../interfaces\";\r\n\r\nexport const Card = (card: MovieCard) => {\r\n  const actors = getActors(card.actors);\r\n  return (\r\n    <Styled.Card>\r\n      <Styled.Img src={`https://kinoafisha.ua${card.image}`} />\r\n      <Styled.MovieDescription>\r\n        <h3>{card.name}</h3>\r\n        <div>{card.countries}</div>\r\n        <div>{card.count_vote}</div>\r\n        <div>{`Рейтинг ${card.vote}`}</div>\r\n        {actors[0] !== \"\" && (\r\n          <>\r\n            <div>Актеры:</div>\r\n            <ul>\r\n              {actors.map(item => {\r\n                return <li>{item}</li>;\r\n              })}\r\n            </ul>\r\n          </>\r\n        )}\r\n        <Styled.Button>Button</Styled.Button>\r\n      </Styled.MovieDescription>\r\n    </Styled.Card>\r\n  );\r\n};\r\n\r\nconst getActors = (actors: string) => {\r\n  const regExp = /<[^>]+>/g;\r\n  const actorList = actors.replace(regExp, \"\");\r\n  return actorList.split(\", \");\r\n};\r\n","import React from \"react\";\r\nimport { Card } from \"./card\";\r\nimport { MoviesCards } from \"../interfaces\";\r\n\r\nexport const Cards = (cards: MoviesCards) => {\r\n  return (\r\n    <>\r\n      {cards.cards.map(item => {\r\n        return (\r\n          <Card\r\n            key={item.id}\r\n            id={item.id}\r\n            name={item.name}\r\n            image={item.image}\r\n            countries={item.countries}\r\n            actors={item.actors}\r\n            vote={item.vote}\r\n            count_vote={item.count_vote}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Styled } from \"./styled\";\r\nimport { Cards } from \"./components/cards\";\r\nimport { MovieCard } from \"./interfaces\";\r\n\r\nconst initialValue: MovieCard[] = [];\r\n\r\nexport const MoviesBoard = () => {\r\n  const [movies, setMovies] = useState(initialValue);\r\n\r\n  useEffect(() => {\r\n    getMovies(setMovies);\r\n  }, []);\r\n\r\n  return (\r\n    <Styled.MoviesBoard>\r\n      <Cards cards={movies} />\r\n    </Styled.MoviesBoard>\r\n  );\r\n};\r\n\r\nconst getMovies = async (setItems: (result: MovieCard[]) => void) => {\r\n  const response = await fetch(\r\n    \"https://kinoafisha.herokuapp.com/api/kinoafisha_load\"\r\n  );\r\n  const data = await response.json();\r\n  setItems(data.result);\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n","import React from \"react\";\r\nimport { Header } from \"./header/index\";\r\nimport { Footer } from \"./footer/index\";\r\nimport { Body } from \"./body/index\";\r\nimport { GlobalStyle } from \"./globalStyled\";\r\nimport { MoviesBoard } from \"./body/movies-board/index\";\r\n\r\nexport const App = () => {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Header />\r\n      <Body>\r\n        <MoviesBoard />\r\n      </Body>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n"],"sourceRoot":""}