{"version":3,"sources":["serviceWorker.ts","body/styled.ts","constants.ts","body/component.tsx","header/styled.ts","header/component.tsx","footer/styled.ts","footer/component.tsx","components/src/buttons/green-button/styled.ts","components/src/buttons/green-button/component.tsx","components/src/card/card-description.tsx","components/src/card/styled.ts","components/src/card/component.tsx","components/src/movies-board/styled.ts","components/src/movies-board/component.tsx","globalStyled.ts","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Styled","Body","styled","main","props","children","Header","header","Footer","footer","Button","button","GreenButton","text","Description","name","countries","count_vote","vote","actors","map","item","index","key","Card","div","Img","img","getActors","imageUrl","getImageUrl","image","src","replace","split","url","MoviesBoard","initialValue","useState","movies","setMovies","useEffect","getMovies","id","setItems","a","fetch","response","json","data","result","GlobalStyle","createGlobalStyle","AppRouter","path","component","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a072abe8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import styled from \"styled-components\";\r\n\r\nimport { FOOTER_HEIGHT, HEADER_HEIGHT } from \"../constants\";\r\n\r\nconst Body = styled.main`\r\n  overflow: auto;\r\n  position: fixed;\r\n  height: calc(100% - (${FOOTER_HEIGHT} + ${HEADER_HEIGHT}));\r\n  background-color: #f4f4f4;\r\n`;\r\n\r\nexport const Styled = { Body };\r\n","export const FOOTER_HEIGHT = \"50px\";\r\nexport const HEADER_HEIGHT = \"50px\";\r\nexport const UPLOAD_MOVIES_IMAGE_DOMEN = \"https://kinoafisha.ua\";\r\nexport const MOVIES_API_URL =\r\n  \"https://kinoafisha.herokuapp.com/api/kinoafisha_load\";\r\n","import React, { FunctionComponent } from \"react\";\r\n\r\nimport { Styled } from \"./styled\";\r\n\r\nexport const Body: FunctionComponent = props => {\r\n  return <Styled.Body>{props.children}</Styled.Body>;\r\n};","import styled from \"styled-components\";\r\n\r\nimport { HEADER_HEIGHT } from \"../constants\";\r\n\r\nconst Header = styled.header`\r\n  height: ${HEADER_HEIGHT};\r\n  background-color: #8ac858;\r\n`;\r\n\r\nexport const Styled = { Header };\r\n","import React from \"react\";\r\n\r\nimport { Styled } from \"./styled\";\r\n\r\nexport const Header = () => {\r\n  return <Styled.Header />;\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nimport { FOOTER_HEIGHT } from \"../constants\";\r\n\r\nconst Footer = styled.footer`\r\n  width: 100%;\r\n  height: ${FOOTER_HEIGHT};\r\n  background-color: #8ac858;\r\n  position: absolute;\r\n  bottom: 0;\r\n`;\r\n\r\nexport const Styled = { Footer };\r\n","import React from \"react\";\r\n\r\nimport { Styled } from \"./styled\";\r\n\r\nexport const Footer = () => {\r\n  return <Styled.Footer />;\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n  min-width: 120px;\r\n  height: 30px;\r\n  border-radius: 7px;\r\n  font-weight: 700;\r\n  cursor: pointer;\r\n  position: absolute;\r\n  bottom: 15px;\r\n  right: 15px;\r\n  border: none;\r\n  background: rgb(138, 200, 88)\r\n    linear-gradient(rgb(138, 200, 88), rgb(60, 200, 88));\r\n  box-shadow: inset 0 -2px 1px rgba(0, 0, 0, 0),\r\n    inset 0 1px 2px rgba(0, 0, 0, 0), inset 0 0 0 60px rgba(255, 255, 0, 0);\r\n\r\n  &:hover {\r\n    background-color: #59f23a;\r\n    box-shadow: inset 0 -1px 1px rgba(0, 0, 0, 0),\r\n      inset 0 1px 2px rgba(0, 0, 0, 0), inset 0 0 0 60px rgba(255, 255, 0, 0.5);\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  &:active {\r\n    padding: 6px 8px 6px;\r\n    border-color: rgba(177, 159, 0, 1);\r\n    box-shadow: inset 0 -1px 1px rgba(0, 0, 0, 0.1),\r\n      inset 0 1px 2px rgba(0, 0, 0, 0.3),\r\n      inset 0 0 0 60px rgba(255, 255, 0, 0.45);\r\n  }\r\n`;\r\n\r\nexport const Styled = { Button };\r\n","import React from \"react\";\r\n\r\nimport { Styled } from \"./styled\";\r\n\r\nexport const GreenButton = (props: { text: string }) => {\r\n  return <Styled.Button>{props.text}</Styled.Button>;\r\n};\r\n","import React from \"react\";\r\n\r\ninterface Description {\r\n  name: string;\r\n  countries: string;\r\n  count_vote: string;\r\n  vote: string;\r\n  actors: string[];\r\n}\r\n\r\nexport const Description = (props: Description) => {\r\n  return (\r\n    <>\r\n      <h3>{props.name}</h3>\r\n      <div>{props.countries}</div>\r\n      <div>{props.count_vote}</div>\r\n      <div>{`Рейтинг ${props.vote}`}</div>\r\n      {props.actors[0] !== \"\" && (\r\n        <>\r\n          <div>Актеры:</div>\r\n          <ul>\r\n            {props.actors.map((item, index) => {\r\n              return <li key={index}>{item}</li>;\r\n            })}\r\n          </ul>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nconst Card = styled.div`\r\n  position: relative;\r\n  margin: 15px 25px;\r\n  width: 250px;\r\n  height: 400px;\r\n  border: 2px solid #8ac858;\r\n  border-radius: 15px;\r\n  word-break: break-word;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  width: inherit;\r\n  height: inherit;\r\n  border-radius: 13px;\r\n\r\n  ${Card}:hover & {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst Description = styled.div`\r\n  display: none;\r\n  padding: 10px;\r\n\r\n  ${Card}:hover & {\r\n    display: block;\r\n  }\r\n\r\n  div {\r\n    padding: 2px 0;\r\n  }\r\n\r\n  ul {\r\n    margin: 5px 0;\r\n  }\r\n\r\n  h3 {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nexport const Styled = { Img, Card, Description };\r\n","import React from \"react\";\r\n\r\nimport { GreenButton } from \"../buttons\";\r\nimport { Description } from \"./card-description\";\r\nimport { UPLOAD_MOVIES_IMAGE_DOMEN } from \"../../../constants\";\r\n\r\nimport { Styled } from \"./styled\";\r\n\r\nexport interface Movie {\r\n  id: string;\r\n  name: string;\r\n  image: string;\r\n  countries: string;\r\n  vote: string;\r\n  count_vote: string;\r\n  actors: string;\r\n}\r\n\r\nexport const Card = (props: Movie) => {\r\n  const actors = getActors(props.actors);\r\n  const imageUrl = getImageUrl(props.image);\r\n  return (\r\n    <Styled.Card>\r\n      <Styled.Img src={`${UPLOAD_MOVIES_IMAGE_DOMEN}${imageUrl}`} />\r\n      <Styled.Description>\r\n        <Description\r\n          name={props.name}\r\n          countries={props.countries}\r\n          count_vote={props.count_vote}\r\n          vote={props.vote}\r\n          actors={actors}\r\n        />\r\n        <GreenButton text=\"hello\" />\r\n      </Styled.Description>\r\n    </Styled.Card>\r\n  );\r\n};\r\n\r\nconst getActors = (actors: string) => {\r\n  const regExp = /<[^>]+>/g;\r\n  const actorList = actors.replace(regExp, \"\");\r\n  return actorList.split(\", \");\r\n};\r\n\r\nconst getImageUrl = (url: string) => {\r\n  return url.replace(\"sm_\", \"\");\r\n};\r\n","import styled from 'styled-components';\r\n\r\nconst MoviesBoard = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    font-size: 20px;\r\n    font-style: italic;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const Styled = { MoviesBoard }","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Movie, Card } from \"../card\";\r\nimport { MOVIES_API_URL } from \"../../../constants\";\r\n\r\nimport { Styled } from \"./styled\";\r\n\r\nconst initialValue: Movie[] = [];\r\n\r\nexport const MoviesBoard = () => {\r\n  const [movies, setMovies] = useState(initialValue);\r\n\r\n  useEffect(() => {\r\n    getMovies(setMovies);\r\n  }, []);\r\n\r\n  return (\r\n    <Styled.MoviesBoard>\r\n      {movies.map(item => {\r\n        return (\r\n          <Card\r\n            key={item.id}\r\n            id={item.id}\r\n            name={item.name}\r\n            image={item.image}\r\n            countries={item.countries}\r\n            actors={item.actors}\r\n            vote={item.vote}\r\n            count_vote={item.count_vote}\r\n          />\r\n        );\r\n      })}\r\n    </Styled.MoviesBoard>\r\n  );\r\n};\r\n\r\nconst getMovies = async (setItems: (result: Movie[]) => void) => {\r\n  const response = await fetch(MOVIES_API_URL);\r\n  const data = await response.json();\r\n  setItems(data.result);\r\n};\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    body {\r\n        margin: 0;\r\n    }\r\n`;","import { Route, Switch } from \"react-router\";\r\nimport React from \"react\";\r\n\r\nimport { Body } from \"./body\";\r\nimport { Header } from \"./header\";\r\nimport { Footer } from \"./footer\";\r\nimport { MoviesBoard } from \"./components\";\r\n\r\nimport { GlobalStyle } from \"./globalStyled\";\r\n\r\nexport const App = () => {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Header />\r\n      <Body>\r\n        <AppRouter />\r\n      </Body>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nconst AppRouter = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/gallery\" component={MoviesBoard} />\r\n    </Switch>\r\n  );\r\n};\r\n","import { BrowserRouter as Router } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport { App } from \"./App\";\r\n\r\nReactDOM.render(\r\n  <Router basename={process.env.PUBLIC_URL + '/'}>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}