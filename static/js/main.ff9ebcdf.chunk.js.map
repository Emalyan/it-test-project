{"version":3,"sources":["serviceWorker.ts","header/styled.ts","constants.ts","header/index.tsx","footer/styled.ts","footer/index.tsx","body/styled.ts","body/movies-board/styled.ts","body/movies-board/components/cart.tsx","body/movies-board/components/carts.tsx","body/movies-board/index.tsx","body/index.tsx","globalStyled.ts","index.tsx","App.tsx"],"names":["Boolean","window","location","hostname","match","Styled","Header","styled","header","Footer","footer","Body","div","MoviesBoard","Cart","cart","name","Carts","carts","map","item","key","id","useState","items","setItems","useEffect","getMovies","a","fetch","response","json","data","result","GlobalStyle","createGlobalStyle","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+ICfN,IAKaC,EAAS,CAAEC,OALTC,IAAOC,OAAV,ICFgB,SCEfF,EAAS,WAClB,OAAO,kBAACD,EAAOC,OAAR,O,yLCDX,IAQaD,EAAS,CAAEI,OARTF,IAAOG,OAAV,IFHgB,SGGfD,EAAS,WAClB,OAAO,kBAAC,EAAOA,OAAR,O,kMCDX,IAOaJ,EAAS,CAAEM,KAPXJ,IAAOK,IAAV,IJHkB,OACA,S,gdKC5B,IAAMC,EAAcN,IAAOK,IAAV,KAkBJP,EAAS,CAAES,KAVXP,IAAOK,IAAV,KAUoBC,eChBjBC,EAAO,SAACC,GACjB,OACI,kBAAC,EAAOD,KAAR,KACKC,EAAKC,OCHLC,EAAQ,SAACC,GAClB,OACI,oCACKA,EAAMA,MAAMC,KAAI,SAAAC,GACb,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAKE,GAAIA,GAAIF,EAAKE,GAAIN,KAAMI,EAAKJ,YCJtDH,EAAc,WAAO,IAAD,EACHU,mBAAS,IADN,mBACtBC,EADsB,KACfC,EADe,KAO7B,OAJAC,qBAAU,WACNC,EAAUF,KACX,IAGC,kBAAC,EAAOZ,YAAR,KACI,kBAAC,EAAD,CAAOK,MAAOM,MAKpBG,EAAS,uCAAG,WAAOF,GAAP,iBAAAG,EAAA,sEACSC,MAAM,wDADf,cACRC,EADQ,gBAEKA,EAASC,OAFd,OAERC,EAFQ,OAGdP,EAASO,EAAKC,QAHA,2CAAH,sDCdFtB,EAAO,WAChB,OACI,kBAAC,EAAOA,KAAR,KACI,kBAAC,EAAD,Q,8GCLL,IAAMuB,EAAcC,YAAH,KCGxBC,IAASC,OAAO,mBCCG,WACf,OACI,oCACI,kBAACH,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SDPI,MAAQI,SAASC,eAAe,SboI1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ff9ebcdf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import styled from 'styled-components';\r\nimport { headerHeight } from '../constants'\r\n\r\nconst Header = styled.header`    \r\n    height: ${headerHeight};\r\n    background-color: #8ac858;\r\n`;\r\n\r\nexport const Styled = { Header }","export const footerHeight = \"50px\";\r\nexport const headerHeight = \"50px\";","import React from 'react';\r\nimport { Styled } from './styled';\r\n\r\nexport const Header = () => {\r\n    return <Styled.Header/>;\r\n}","import styled from 'styled-components';\r\nimport { footerHeight } from '../constants'\r\n\r\nconst Footer = styled.footer`\r\n    width: 100%;\r\n    height: ${footerHeight};\r\n    background-color: #8ac858;\r\n    position: absolute;    \r\n    bottom: 0; \r\n`;\r\n\r\nexport const Styled = { Footer }","import React from 'react';\r\nimport { Styled } from './styled';\r\n\r\nexport const Footer = () => {\r\n    return <Styled.Footer/>\r\n}","import styled from 'styled-components';\r\nimport { footerHeight, headerHeight } from '../constants';\r\n\r\nconst Body = styled.div`\r\n    overflow: auto;\r\n    position: absolute;\r\n    height: calc(100% - ${footerHeight} - ${headerHeight});    \r\n    background-color: #f4f4f4;    \r\n`;\r\n\r\nexport const Styled = { Body }","import styled from 'styled-components';\r\n\r\nconst MoviesBoard = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    font-size: 20px;\r\n    font-style: italic;\r\n    justify-content: center;\r\n`;\r\n\r\nconst Cart = styled.div`\r\n    text-align: center;\r\n    margin: 15px 25px;\r\n    width: 400px;\r\n    height: 100px;\r\n    line-height: 100px;\r\n    border: 2px solid #8ac858;\r\n    border-radius: 15px;\r\n`;\r\n\r\nexport const Styled = { Cart, MoviesBoard }","import React from 'react';\r\nimport { Styled } from '../styled';\r\nimport { ICart } from '../interfaces';\r\n\r\nexport const Cart = (cart: ICart) => {\r\n    return (\r\n        <Styled.Cart>            \r\n            {cart.name}            \r\n        </Styled.Cart>\r\n    );\r\n}","import React from 'react';\r\nimport { Cart } from './cart';\r\nimport { ICarts } from '../interfaces';\r\n\r\nexport const Carts = (carts: ICarts) => {    \r\n    return (\r\n        <>\r\n            {carts.carts.map(item => {\r\n                return <Cart key={item.id} id={item.id} name={item.name} />\r\n            })}\r\n        </>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Styled } from './styled';\r\nimport { Carts } from './components/carts'; \r\n\r\nexport const MoviesBoard = () => {\r\n    const [items, setItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getMovies(setItems);        \r\n    }, []);            \r\n\r\n    return (     \r\n        <Styled.MoviesBoard>\r\n            <Carts carts={items}/>\r\n        </Styled.MoviesBoard>           \r\n    );\r\n}\r\n\r\nconst getMovies = async (setItems: React.Dispatch<React.SetStateAction<never[]>>) => {    \r\n    const response = await fetch(\"https://kinoafisha.herokuapp.com/api/kinoafisha_load\");\r\n    const data = await response.json();                   \r\n    setItems(data.result);\r\n}","import React from 'react';\r\nimport { Styled } from './styled';\r\nimport { MoviesBoard } from './movies-board';\r\n\r\nexport const Body = () => {\r\n    return (\r\n        <Styled.Body>                        \r\n            <MoviesBoard />\r\n        </Styled.Body>\r\n    );\r\n}","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    body {\r\n        margin: 0;\r\n    }\r\n`;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport { Header } from './header/index';\r\nimport { Footer } from './footer/index';\r\nimport { Body } from './body/index';\r\nimport { GlobalStyle } from './globalStyled';\r\n\r\nexport const App = () => {\r\n    return (\r\n        <>\r\n            <GlobalStyle/>\r\n            <Header/>\r\n            <Body/>  \r\n            <Footer/>          \r\n        </>\r\n    );\r\n}"],"sourceRoot":""}