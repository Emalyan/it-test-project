{"version":3,"sources":["serviceWorker.ts","header/header.tsx","footer/footer.tsx","content/content.tsx","index.tsx","App.tsx"],"names":["Boolean","window","location","hostname","match","HeaderBlock","styled","div","Header","FooterBlock","Footer","Wrapper","Content","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8JCfN,IAAMC,EAAcC,IAAOC,IAAV,KAMJC,EAAS,WAClB,OAAO,kBAACH,EAAD,O,0LCPX,IAAMI,EAAcH,IAAOC,IAAV,KAQJG,EAAS,WAClB,OAAO,kBAACD,EAAD,O,yOCTX,IAAME,EAAUL,IAAOC,IAAV,KASAK,EAAU,WACnB,OACI,kBAACD,EAAD,KACI,ohI,MCTZE,IAASC,OAAO,mBCDG,WACf,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SDJI,MAAQC,SAASC,eAAe,SJmI1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.482cc278.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import styled from 'styled-components';\r\nimport React from 'react';\r\n\r\nconst HeaderBlock = styled.div`\r\n    width: 100%;\r\n    height: 50px;\r\n    background-color: #8ac858;\r\n`;\r\n\r\nexport const Header = () => {\r\n    return <HeaderBlock/>;\r\n}","import styled from 'styled-components';\r\nimport React from 'react';\r\n\r\nconst FooterBlock = styled.div`\r\n    width: 100%;\r\n    height: 50px;\r\n    background-color: #8ac858;\r\n    position: absolute;    \r\n    bottom: 0; \r\n`;\r\n\r\nexport const Footer = () => {\r\n    return <FooterBlock/>\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n    overflow: auto;\r\n    position: absolute;\r\n    height: calc(100% - 100px);\r\n    font-size: 30px;\r\n    font-style: italic;\r\n    background-color: #f4f4f4;    \r\n`;\r\n\r\nexport const Content = () => {\r\n    return (\r\n        <Wrapper>            \r\n            <div>\r\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Dignissim enim sit amet venenatis urna. Malesuada fames ac turpis egestas sed tempus urna et pharetra. Pretium fusce id velit ut tortor pretium viverra suspendisse potenti. Viverra suspendisse potenti nullam ac. Consectetur purus ut faucibus pulvinar elementum integer enim neque volutpat. Et netus et malesuada fames ac turpis. In aliquam sem fringilla ut. Mattis enim ut tellus elementum sagittis vitae et leo duis. Nisl vel pretium lectus quam id leo in vitae turpis. Integer feugiat scelerisque varius morbi enim nunc faucibus. Suspendisse potenti nullam ac tortor vitae. Risus feugiat in ante metus dictum at tempor commodo. Sagittis orci a scelerisque purus semper eget duis at. Maecenas pharetra convallis posuere morbi leo. Sagittis nisl rhoncus mattis rhoncus urna. Blandit cursus risus at ultrices mi tempus imperdiet nulla. Dolor purus non enim praesent elementum facilisis leo. Adipiscing elit duis tristique sollicitudin nibh sit amet commodo.\r\n\r\n                Ac feugiat sed lectus vestibulum mattis ullamcorper velit sed. Id porta nibh venenatis cras sed felis. Gravida cum sociis natoque penatibus et. Suscipit tellus mauris a diam maecenas. Donec massa sapien faucibus et molestie ac feugiat sed. Suspendisse potenti nullam ac tortor vitae purus. Neque gravida in fermentum et sollicitudin. Rutrum quisque non tellus orci ac auctor augue. Vitae suscipit tellus mauris a diam maecenas sed enim. Ultricies mi quis hendrerit dolor magna eget est lorem. Ac tincidunt vitae semper quis lectus. At in tellus integer feugiat scelerisque varius morbi enim. Dapibus ultrices in iaculis nunc sed augue lacus viverra. Feugiat nisl pretium fusce id. Integer feugiat scelerisque varius morbi enim nunc. Leo in vitae turpis massa sed elementum tempus egestas sed.\r\n\r\n                Elit duis tristique sollicitudin nibh sit amet commodo nulla. Turpis nunc eget lorem dolor sed viverra ipsum nunc aliquet. Lacinia quis vel eros donec. Nascetur ridiculus mus mauris vitae ultricies leo integer malesuada nunc. Eleifend donec pretium vulputate sapien. Sagittis id consectetur purus ut. Elementum nisi quis eleifend quam adipiscing vitae proin. Faucibus a pellentesque sit amet porttitor eget dolor. Non sodales neque sodales ut etiam. Mi sit amet mauris commodo quis imperdiet massa tincidunt nunc. Ut consequat semper viverra nam libero justo laoreet sit amet. In fermentum et sollicitudin ac orci phasellus egestas tellus. Quam elementum pulvinar etiam non quam lacus suspendisse faucibus. Placerat duis ultricies lacus sed turpis tincidunt id. Faucibus interdum posuere lorem ipsum dolor sit amet consectetur adipiscing. Leo integer malesuada nunc vel risus commodo. Amet volutpat consequat mauris nunc.\r\n\r\n                Interdum posuere lorem ipsum dolor sit. Ut porttitor leo a diam sollicitudin. Neque laoreet suspendisse interdum consectetur. Enim lobortis scelerisque fermentum dui faucibus in ornare quam. Aliquam vestibulum morbi blandit cursus risus at ultrices mi tempus. Nibh nisl condimentum id venenatis a condimentum vitae sapien pellentesque. Aenean pharetra magna ac placerat vestibulum lectus mauris ultrices. Neque egestas congue quisque egestas diam in arcu cursus. A lacus vestibulum sed arcu non odio euismod lacinia. Vel facilisis volutpat est velit egestas dui id ornare.\r\n\r\n                Purus semper eget duis at tellus at. Commodo elit at imperdiet dui accumsan sit amet nulla facilisi. Est placerat in egestas erat imperdiet sed. Enim sed faucibus turpis in eu mi bibendum neque. Ultrices mi tempus imperdiet nulla malesuada pellentesque elit. Purus faucibus ornare suspendisse sed nisi lacus. Tortor at auctor urna nunc id cursus metus aliquam. Volutpat lacus laoreet non curabitur. Sagittis aliquam malesuada bibendum arcu vitae elementum curabitur vitae nunc. Volutpat commodo sed egestas egestas fringilla phasellus faucibus scelerisque eleifend. Porta nibh venenatis cras sed felis eget velit. Volutpat blandit aliquam etiam erat velit scelerisque in. Mauris augue neque gravida in fermentum.\r\n            </div>                            \r\n        </Wrapper>\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { App } from './App';\r\nimport './index.css'\r\n\r\nReactDOM.render(<App/>, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport { Header } from './header/header';\r\nimport { Footer } from './footer/footer';\r\nimport { Content } from './content/content';\r\n\r\nexport const App = () => {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Content/>  \r\n            <Footer/>          \r\n        </>\r\n    );\r\n}"],"sourceRoot":""}